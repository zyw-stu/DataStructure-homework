#include <cstdio>
#define N 3  //行数
#define M 3 //列数
//第i行最大值，第j列最小值 
typedef struct {
	int row;//该行的行数 
	int col;//该行最大值所在的列 
	int val;//该行的最大值	
}andian;//存放每一行的最大值的信息 
int main()
{
	int a[N][M];
	int i, j;
	for (i = 0; i < N; i++) { //创建数组，输入数组的各个数值 
		for (j = 0; j < M; j++)
		{
			scanf_s("%d", &a[i][j]);
		}
	}
	andian maxRow[N * M];
	int c = 0;//记录可能的鞍点数 
	for (i = 0; i < N; i++) {//对每一行进行遍历，寻找每一行的最大值 
		int maxVal = a[i][0];
		for (j = 1; j < M; j++) {
			if (a[i][j] > maxVal) {
				maxVal = a[i][j];
			}
		}
		for (j = 0; j < M; j++)//因为每一行可能有多个相同的最大值
		{
			if (a[i][j] == maxVal)
			{
				maxRow[c].row = i;
				maxRow[c].col = j;
				maxRow[c].val = maxVal;
				c++;
			}
		}
	}
	int min;
	int flag; int f = 0;
	for (i = 0; i < c; i++) {//遍历maxRow中的每一个元素，判断它是否是所在列的最小值 
		min = maxRow[i].val;
		int row = maxRow[i].row;
		int col = maxRow[i].col;
		flag = 1;
		int k;
		for (k = 0; k < N; k++) {
			if (a[k][col] <min) {
				flag = 0;
				break;
			}
		}
		if (flag) {
			f = 1;
			printf("鞍点所在的行,列分别为：(%d,%d)\n", maxRow[i].row, maxRow[i].col);
		}
	}
	if (f == 0) printf("不存在鞍点\n");
	return 0;
}
